import java.security.SecureRandom;


class DataSet
{
    private SecureRandom random = new SecureRandom();
    private int[] dataArray;

    // defulat constructor.
    public DataSet()
    {
        // generate 10 random integers between 0 and 100.
        this(10, 0, 100);
    }

    // overloaded constructor.
    public DataSet(int size, int min, int max)
    {
        dataArray = new int[size];

        for(int i=0; i<dataArray.length; i++)
        {
            dataArray[i] = min + random.nextInt(max - min + 1);
        }
    }


    // the getter method of dataArray.
    public int[] getDataArray() { return dataArray; }
}


class Sorter
{
    private int[] dataArray;

    // default constructor.
    public Sorter() {}

    // overloaded constructor.
    public Sorter(DataSet d)
    {
        dataArray = d.getDataArray();
    }

    // the method to swap two numbers in the array.
    private static void swap(int[] array, int i, int j)
    {
        int temp;

        temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    @Override
    public String toString()
    {
        String output = "";

        for(int element : dataArray)
        {
            output += Integer.toString(element) + " ";
        }

        return output;
    }

    // the method to sort the array's data using BubbleSort algorithm.
    public Sorter bubbleSort()
    {
        boolean swapped = true;

        while(swapped)
        {
            swapped = false;

            for(int i=0; i<dataArray.length-1; i++)
            {
                if(dataArray[i] > dataArray[i+1])
                {
                    // swap the numbers if they were put in wrong order.
                    swap(dataArray, i, i+1);

                    // change the flag.
                    swapped = true;
                }
            }
        }

        return this;
    }

    // the method to sort the array's data using SelectionSort algorithm.
    public Sorter selectionSort()
    {
        for(int i=0; i<dataArray.length-1; i++)
        {
            int min = i;

            for(int j=i+1; j<dataArray.length; j++)
            {
                if(dataArray[j] < dataArray[min])
                {
                    min = j;
                }
            }

            swap(dataArray, i, min);
        }

        return this;
    }

    // the method to sort the array's data using InsertionSort algorithm.
    public Sorter insertionSort()
    {
        for(int j=1; j<dataArray.length; j++)
        {
            int temp = dataArray[j];
            int i = j-1;

            while(temp < dataArray[i])
            {
                dataArray[i+1] = dataArray[i];
                i -= 1;

                if(i == -1)
                {
                    break;
                }
            }

            dataArray[i+1] = temp;
        }

        return this;
    }
}


public class SortAlgorithm
{
    public static void main(String[] args)
    {
        Sorter s;

        s = new Sorter(new DataSet(5, 0, 100));
        System.out.println("[*] Bubble Sort...");
        System.out.println("--> Source: " + s);
        System.out.println("--> Result: " + s.bubbleSort());
        System.out.println();

        s = new Sorter(new DataSet(5, 0, 100));
        System.out.println("[*] Selection Sort...");
        System.out.println("--> Source: " + s);
        System.out.println("--> Result: " + s.selectionSort());
        System.out.println();

        s = new Sorter(new DataSet(5, 0, 100));
        System.out.println("[*] Insertion Sort...");
        System.out.println("--> Source: " + s);
        System.out.println("--> Result: " + s.insertionSort());
        System.out.println();
    }
}
