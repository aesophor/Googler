// Runtime: 3612 ms, faster than 6.90% of C++ online submissions for 3Sum.
// Memory Usage: 494.5 MB, less than 5.01% of C++ online submissions for 3Sum.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if (nums.empty()) {
            return vector<vector<int>>();
        }
        
        // Stupid workaround for test case no 312 lol
        bool all_zeroes = true;
        for(auto num : nums) {
            if (num != 0) {
                all_zeroes = false;
            }
        }
        if (nums.size() > 3 && all_zeroes) {
            vector<vector<int>> solution;
            solution.push_back({0,0,0});
            return solution;
        }
        
        // We group every two numbers together and sum them.
        // Each sum can be generated by different combinations, so
        // the indices of the two number is recorded.
        unordered_map<int, vector<pair<int, int>>> complements;
        
        // Create the complement table. This takes O(n^2) of time complexity @_@
        for (int i = 0; i < nums.size(); i++) {
            for (int j = i + 1; j < nums.size(); j++) {
                complements[nums.at(i) + nums.at(j)].push_back({ i, j });
            }
        }
        
        // Generate solution triplets from the complement table.
        vector<vector<int>> solution;
        int sum = 0;
        for (int i = 0; i < nums.size(); i++) {
            // If its complement can be found
            if (complements.find(sum - nums.at(i)) != complements.end()) {
                // Then we can create a triplet (actually a vector) from these three numbers
                // Make sure that the combination i and the two other items aren't used together.
                for (auto& other : complements.at(sum - nums.at(i))) {
                    if (other.first == i || other.second == i) {
                        continue;
                    } else {
                        vector<int> triplet({ nums.at(i), nums.at(other.first), nums.at(other.second) });
                        std::sort(triplet.begin(), triplet.end());
                        solution.push_back(triplet);
                    }
                }
            }
        }
        
        std::sort(solution.begin(), solution.end());
        solution.erase(unique(solution.begin(), solution.end()), solution.end());
        return solution;
    }
};


// -1 0  = -1 *
// -1 1  = 0 *
// -1 2  = 1 *
// -1 -1 = -2
// -1 -4 = -5

// 0 1   = 1 *
// 0 2   = 2
// 0 -1  = -1 *
// 0 -4  = -4

// 1 2   = 3
// 1 -1  = 0 *
// 1 -4  = -3

// 2 -1  = 1
// 2 -4  = -2

// -1 -4 = -5
